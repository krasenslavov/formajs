/*! FormaJS v0.0.4 | (c) Krasen Slavov | https://formajs.com/#license */
function forma(s){return f.construct(s)}const settings={container:".forma",tab:!1,show:!1,auto:!1,manual:!1,submit:!1,prefix:"Enter",suffix:"...",support:[],struct:{},integrate:""},structure={title:"",abbr:!1,wrapper:"div"},classes={control:"forma-control",group:"forma-group",fieldset:"forma-fieldset",wrapper:"forma-wrap",label:"forma-label",open:"forma-open",manual:"forma-manual",description:"forma-description",input:"forma-input",message:"forma-message",valid:"forma-valid",invalid:"forma-invalid"},supported=["input","select","textarea","button","fieldset",'input[type="text"]','input[type="email"]','input[type="number"]','input[type="url"]','input[type="date"]','input[type="password"]','select[type="select-one"]','textarea[type="textarea"]','button[type="submit"]','fieldset[type="fieldset"]'],f=function(s,t,e,i,a){const r={util:{},form:[],elements:[],settings:{},structure:{},classes:{},support:[],supportList:"",message:"",initForma:function(s){if(s&&!this.extendSettings(s))return this.outputErrorMsg(this.message);if(this.settings=Object.assign({},t,s),this.form=document.querySelector(this.settings.container),this.elements=this.form,this.structure=Object.assign({},e,this.settings.struct),this.support=[...new Set([...a,...this.settings.support])],this.supportList=this.support.join(","),"bootstrap"===this.settings.integrate){const s={control:"form-control",group:"form-group",fieldset:"form-fieldset m-3 p-3 bg-light border",nextWrapper:"d-flex",label:"form-label d-flex flex-column px-3",open:"form-open",manual:"flex-fill",description:"form-description text-dark",input:"text-success",message:"text-warning",valid:"text-success",invalid:"text-danger"};this.classes=Object.assign({},i,s)}else this.classes=i;if(this.isMobile()&&(this.settings.tab=!1,this.settings.show=!0,this.settings.manual=!1),this.settings.show&&(this.settings.tab=!1),this.settings.tab||this.settings.manual||(this.settings.show=!0),this.settings.submit&&this.form.querySelector('[type="submit"]').setAttribute("disabled","disabled"),Object.values(this.elements).map(s=>{-1===this.support.indexOf(`${s.localName}[type="${s.type}"]`)&&(this.message+=`The form field '${s.localName}[type="${s.type}"]' is not supported! Take a look at the documentaion https://formajs.com/.;`)}),this.message)return this.outputErrorMsg(this.message);if(this.buildForma(Object.values(this.elements)),this.listenForma(Object.values(this.elements)),this.settings.show){const s=Object.values(this.form.querySelectorAll(`.${this.classes.wrapper}`));s.map(s=>s.classList.add(this.classes.open))}else this.form.querySelectorAll(`.${this.classes.wrapper}`)[0].classList.add(this.classes.wrapper);const r=this.form.querySelectorAll(`.${this.classes.wrapper}`)[0];r.classList.add(this.classes.open);const l=document.querySelectorAll("form")[0];l.querySelectorAll(`.${this.classes.wrapper}`)[0].querySelector(`.${this.classes.control}`).focus()},buildForma:function(s){let t=row=manual=text=abbr=fid="",e=!1;s.map((i,a)=>{if("submit"===i.type||"button"===i.localName)return void(t+=i.outerHTML);let{name:r,title:l,dataset:n}=i;fid=this.util.stripSpecialChars(n.label),this.settings.auto&&(text=n.value||`${this.settings.prefix} ${n.label.toLowerCase()}${this.settings.suffix}`),this.settings.manual&&(manual=this.classes.manual),this.settings.struct.abbr&&(l||(l=n.value||`${this.settings.prefix} ${n.label.toLowerCase()}${this.settings.suffix}`),abbr=`<abbr title="${l}">*</abbr>`),this.util.updateObject({id:fid.toLowerCase().replace(/ /g,"-"),className:this.classes.control,tabindex:a,placeholder:text},i);const o=n.group?`${this.classes.group} ${this.classes.group}__${n.group}`:"";e||(row=""),row+=`<label for="${fid.toLowerCase().replace(/ /g,"-")}" class="${manual}">\n                    <span class="${this.classes.label}">\n                        ${n.label} ${abbr}\n                        <div class="${this.classes.description}">${text}</div>\n                        <div class="${this.classes.input}"></div>\n                        <div class="${this.classes.message}"></div>\n                    </span>\n                    <div class="${this.classes.fieldset}">\n                        ${i.outerHTML}\n                    </div>\n                </label>`,n.group&&s[a+1]&&s[a+1].dataset.group===n.group?e=!0:(e=!1,"ul>li"===this.settings.struct.wrapper?t+=`<li class="${this.classes.wrapper} ${o}">${row}</li>`:"section"===this.settings.struct.wrapper?t+=`<section class="${this.classes.wrapper} ${o}">${row}</section>`:t+=`<div class="${this.classes.wrapper} ${o}">${row}</div>`)}),"ul>li"===this.settings.struct.wrapper?this.form.innerHTML=`<fieldset class="forma"><legend>${this.structure.title}</legend><ul>${t}</ul></fieldset>`:this.form.innerHTML=`<fieldset class="forma"><legend>${this.structure.title}</legend>${t}</fieldset>`},listenForma:function(s){s.map((s,t)=>{if(this.settings.manual&&-1===["fieldset","submit"].indexOf(s.type)){const t=s.closest(`.${this.classes.wrapper}`),e=t.querySelector(`.${this.classes.manual}`);e.addEventListener("click",s=>{if(s.target!==s.currentTarget)return!1;t.classList.contains(this.classes.open)?this.util.toggleClasses([t],"",this.classes.open):this.util.toggleClasses([t],this.classes.open,"")})}["click","change","keydown","keyup","focus","blur"].map(t=>{s.addEventListener(t,e=>{if("fieldset"!==s.type)if("keydown"===t){const t=e.keyCode||e.which;if(9===t){e.preventDefault();const t=s.closest(`.${this.classes.wrapper}`),i=t.nextElementSibling;if(i&&i.classList.contains(this.classes.wrapper))this.settings.tab&&(this.util.toggleClasses([t],"",this.classes.open),this.util.toggleClasses([i],this.classes.open,"")),i.classList.contains(this.classes.wrapper)&&i.querySelector(`.${this.classes.control}`).focus();else{const e=s.closest("form"),i=e.querySelectorAll(`.${this.classes.wrapper}`)[0];this.settings.tab&&(this.util.toggleClasses([t],"",this.classes.open),this.util.toggleClasses([i],this.classes.open,"")),i.querySelector(`.${this.classes.control}`).focus()}}}else if("focus"===t)this.settings.submit&&(0!==this.form.querySelectorAll(`.${this.classes.invalid}`).length||s.validationMessage?this.form.querySelector('[type="submit"]').setAttribute("disabled","disabled"):this.form.querySelector('[type="submit"]').removeAttribute("disabled"));else{const{type:t,validationMessage:e,value:i,title:a,pattern:r}=s,l=s.closest(`.${this.classes.wrapper}`),n=l.querySelector("label"),o=n.querySelector("span"),c=n.querySelector(`div.${this.classes.message}`),u=n.querySelector(`div.${this.classes.input}`);-1===["checkbox","radio"].indexOf(t)&&(u.innerHTML=i),"password"===t&&i.length>0&&(u.innerHTML=i.length+" characters"),e?(c.innerHTML=a&&r?a:e,this.util.toggleClasses([o,s],this.classes.invalid,this.classes.valid)):(c.innerHTML="",this.util.toggleClasses([o,s],this.classes.valid,this.classes.invalid))}})})})},extendSettings:function(s){return Object.keys(s).map(s=>-1!==Object.keys(t).indexOf(s)||(this.message+=`Invalid option '${s}'! Take a look at the docs https://formajs.com/`,!1)),Object.keys(s).map(t=>!!(this.checkSettingType(s,["container"],t,"string")&&this.checkSettingType(s,["output"],t,"string")&&this.checkSettingType(s,["prefix","suffix"],t,"string")&&this.checkSettingType(s,["tab","auto","show","manual","submit"],t,"boolean")&&this.checkSettingType(s,["support"],t,"object"))),s.struct&&(Object.keys(s.struct).map(s=>-1!==Object.keys(e).indexOf(s)||(this.message+=`Invalid structure option '${s}'! Take a look at the docs https://formajs.com/;`,!1)),Object.keys(s.struct).map(t=>!(!this.checkSettingType(s.struct,["title","wrapper"],t,"string")||!this.checkSettingType(s.struct,["abbr"],t,"boolean"))),s.struct.wrapper&&-1===["div","section","ul>li"].indexOf(s.struct.wrapper))?(this.message+="Invalid wrapper value! Must be either 'div', 'section', or 'ul>li'.;",!1):(s.container&&!document.querySelector(s.container)&&(this.message+=`Target form container with '${s.container}' not found wihtin the DOM.;`),s.integrate&&-1===["forma","bootstrap"].indexOf(s.integrate)&&(this.message+="Invalid integration! Currently supported frameworks are 'forma' or 'bootstrap'.;"),!this.message)},checkSettingType:function(s,t,e,i){const a=typeof s[e];return!(t.indexOf(e)>-1&&typeof s[e]!==i)||(this.message+=`Invalid type passed for '${e}, ${a} type passed! Must be a ${i}.;`,!1)},outputErrorMsg:function(s){return s.split(";").map(s=>(s&&console.error(s),!1)),!1},isMobile:function(){return!!(navigator.maxTouchPoints||"ontouchstart"in document.documentElement)}};return r.util.updateObject=function(s,t){Object.entries(s).map(([s,e])=>{t[s]=e})},r.util.toggleClasses=function(s,t,e){s.map(s=>{t&&s.classList.add(t),e&&s.classList.remove(e)})},r.util.stripSpecialChars=function(s){return s.replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi,"")},{construct:function(s){r.initForma(s)}}}(0,settings,structure,classes,supported);window.forma=forma;